<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:x-cmd="http://oval.mitre.org/XMLSchema/oval-definitions-5#cmd" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#cmd" elementFormDefault="qualified" version="5.11">
    <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5" schemaLocation="oval-definitions-schema.xsd"/>
    <xsd:annotation>
        <xsd:documentation>The following is a proposal for the experimental tests, objects, and states that will support execution of a shell command and evaluation of its lines of output.  Each test is an extension of the standard test element defined in the Core Definition Schema. Through extension, each test inherits a set of elements and attributes that are shared amongst all OVAL tests. Each test is described in detail and should provide the information necessary to understand what each element and attribute represents. This document is intended for developers and assumes some familiarity with XML. A high level description of the interaction between the different tests and their relationship to the Core Definition Schema is not outlined here.</xsd:documentation>
        <xsd:documentation>The OVAL Schema is maintained by The MITRE Corporation and developed by the public OVAL Community. For more information, including how to get involved in the project and how to submit change requests, please visit the OVAL website at http://oval.mitre.org.</xsd:documentation>
        <xsd:appinfo>
            <schema>Experimental Schema for the Shell Command Tests</schema>
            <version>5.11</version>
            <date>10/09/2015 8:00:00 AM</date>
            <terms_of_use>Copyright (c) 2002-2013, The MITRE Corporation. All rights reserved. The contents of this file are subject to the terms of the OVAL License located at http://oval.mitre.org/oval/about/termsofuse.html. See the OVAL License for the specific language governing permissions and limitations for use of this schema. When distributing copies of the OVAL Schema, this license header must be included.</terms_of_use>
            <sch:ns prefix="oval-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
            <sch:ns prefix="x-cmd-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5#cmd"/>
            <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
        </xsd:appinfo>
    </xsd:annotation>
    
    <!-- =============================================================================== -->
    <!-- Shell Command Test -->
    <!-- =============================================================================== -->
    <xsd:element name="shellcommand_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                TO DO: Add some documentation
            </xsd:documentation>
            <xsd:appinfo>
                <oval:element_mapping>
                    <oval:test>shellcommand_test</oval:test>
                    <oval:object>shellcommand_object</oval:object>
                    <oval:state>shellcommand_state</oval:state>
                    <oval:item>shellcommand_item</oval:item>
                </oval:element_mapping>
            </xsd:appinfo>
            <xsd:appinfo>
                <sch:pattern id="cmd-def_shellcommand_tst">
                    <sch:rule context="x-cmd-def:shellcommand_test/x-cmd-def:object">
                        <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/x-cmd-def:shellcommand_object/@id"><sch:value-of select="../@id"/> - the object child element of a shellcommand_test must reference a shellcommand_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="x-cmd-def:shellcommand_test/x-cmd-def:state">
                        <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/x-cmd-def:shellcommand_state/@id"><sch:value-of select="../@id"/> - the state child element of a shellcommandtest must reference a shellcommand_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="shellcommand_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                TO DO: Add some documentation
            </xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="x-cmd-def-shellcommand_object_verify_filter_state">
                    <sch:rule context="x-cmd-def:shellcommand_object//oval-def:filter">
                        <sch:let name="parent_object" value="ancestor::x-cmd-def:shellcommand_object"/>
                        <sch:let name="parent_object_id" value="$parent_object/@id"/>
                        <sch:let name="state_ref" value="."/>
                        <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                        <sch:let name="state_name" value="local-name($reffed_state)"/>
                        <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                        <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#cmd') and ($state_name='shellcommand_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:sequence>
                                <xsd:element name="command" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                                    <xsd:annotation>
                                        <xsd:documentation>The full shell command string to execute</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element name="line_selection" type="oval-def:EntityObjectStringType" minOccurs="0" maxOccurs="1">
                                    <xsd:annotation>
                                        <xsd:documentation>The regular expression outlining which lines of command output are collected.  If xsi:nil="true" then collect all lines of output</xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="shellcommand_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                TO DO: Add some documentation
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="command" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The full shell command string to execute</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="line_selection" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The regular expression outlining which lines of command output are collected.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="exit_status" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The exit status value from the command</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="stdout_line" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>A line of standard output from the shell command</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="stderr_line" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>A line of error output from the shell command</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
</xsd:schema>

<?xml version="1.0" encoding="UTF-8"?>
<oval_definitions xsi:schemaLocation="http://oval.mitre.org/XMLSchema/oval-definitions-5 oval-definitions-schema.xsd http://oval.mitre.org/XMLSchema/x-solaris-package511 x-solaris-package511.xsd http://oval.mitre.org/XMLSchema/x-solaris-packagefreezelist x-solaris-package-freeze-list.xsd http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd http://oval.mitre.org/XMLSchema/oval-definitions-5#unix unix-definitions-schema.xsd" xmlns="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5">
  <generator>
    <oval:product_name>The OVAL Sandbox</oval:product_name>
    <oval:schema_version>5.11</oval:schema_version>
    <oval:timestamp>2013-07-14T14:06:41.489-04:00</oval:timestamp>
  </generator>
  <definitions>
    <definition id="oval:sample:def:1" version="0" class="miscellaneous">
      <metadata>
        <title>Are there packages that won't get updated because they are frozen?</title>
        <affected family="unix">
          <platform>Sun Solaris 11</platform>
        </affected>
        <description>This definition checks for the existence of any packages that are currently frozen and have updates waiting to be installed. Looking at these packages is of interest because the updates will not be applied as long as the package is frozen.</description>
      </metadata>
      <criteria operator="AND">
        <criterion comment="Are there any packages that are not getting updated because they are frozen?" test_ref="oval:sample:tst:1"/>
      </criteria>
    </definition>
  </definitions>
  <tests>
    <package511_test id="oval:sample:tst:1" version="0" comment="Are there any packages that are not getting updated because they are frozen?" check_existence="at_least_one_exists" check="at least one" xmlns="http://oval.mitre.org/XMLSchema/x-solaris-package511">
      <object object_ref="oval:sample:obj:1"/>
    </package511_test>
  </tests>
  <objects>
    <package511_object id="oval:sample:obj:1" version="0" comment="Search all packages and only keep those that are frozen and have updates available." xmlns="http://oval.mitre.org/XMLSchema/x-solaris-package511">
      <publisher operation="pattern match">.*</publisher>
      <name operation="pattern match">.*</name>
      <version datatype="version" operation="greater than or equal">0</version>
      <timestamp operation="pattern match">.*</timestamp>
      <oval-def:filter action="include">oval:sample:ste:1</oval-def:filter>      
    </package511_object>
    <packagefreezelist_object id="oval:sample:obj:2" version="0" comment="Collect the FMRIs of all frozen packages." xmlns="http://oval.mitre.org/XMLSchema/x-solaris-packagefreezelist"/>
  </objects>
  <states>
    <package511_state id="oval:sample:ste:1" version="0" comment="FMRI matches a frozen package and updates are available." xmlns="http://oval.mitre.org/XMLSchema/x-solaris-package511">
      <fmri operation="pattern match" var_ref="oval:sample:var:1" var_check="at least one"/>
      <updates_available datatype="boolean">true</updates_available>
    </package511_state>
  </states>
  <variables>
    <local_variable id="oval:sample:var:1" version="0" datatype="string" comment="Get the FMRIs of any packages that are frozen on the system. Since the package freeze FMRI is just a partial FMRI (i.e. no publisher), we need to treat it as a regex so it will match the end of the full FMRI in the package511_item which is why escape_regex is used here.">
      <escape_regex>
        <object_component object_ref="oval:sample:obj:2" item_field="fmri"/>
      </escape_regex>
    </local_variable>
  </variables>
</oval_definitions>
